// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  name        String?
  avatar      String?
  phone       String?
  address     String?
  role        UserRole @default(USER)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  adoptions        Adoption[]
  bookings         Booking[]
  blogPosts        BlogPost[]
  comments         Comment[]
  likes            Like[]
  favorites        Favorite[]
  volunteerApps    VolunteerApplication[]
  donations        Donation[]
  notifications    Notification[]

  @@map("users")
}

model Pet {
  id          String    @id @default(cuid())
  name        String
  species     String    // 物种：狗、猫等
  breed       String?   // 品种
  age         Int?      // 年龄（月）
  gender      Gender
  size        PetSize
  color       String?
  description String?   @db.Text
  healthInfo  String?   @db.Text
  personality String?   @db.Text
  images      String?   @db.Text // JSON array of image URLs
  status      PetStatus @default(AVAILABLE)
  location    String?
  rescueDate  DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  adoptions   Adoption[]
  likes       Like[]
  favorites   Favorite[]

  @@map("pets")
}

model Adoption {
  id          String          @id @default(cuid())
  userId      String
  petId       String
  status      AdoptionStatus  @default(PENDING)
  reason      String?         @db.Text
  experience  String?         @db.Text
  livingSpace String?
  hasOtherPets Boolean?
  adminNotes  String?         @db.Text
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet         Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("adoptions")
}

model Service {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  price       Decimal?  @db.Decimal(10, 2)
  duration    Int?      // 服务时长（分钟）
  category    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  bookings    Booking[]

  @@map("services")
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  serviceId   String
  appointmentDate DateTime
  status      BookingStatus @default(PENDING)
  notes       String?       @db.Text
  adminNotes  String?       @db.Text
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  service     Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model BlogPost {
  id          String    @id @default(cuid())
  title       String
  content     String    @db.Text
  excerpt     String?
  coverImage  String?
  authorId    String
  category    String?
  tags        String?   // JSON array
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[]

  @@map("blog_posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  userId    String
  postId    String
  parentId  String?  // 用于回复评论
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      BlogPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  petId     String?
  createdAt DateTime @default(now())

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      BlogPost? @relation(fields: [postId], references: [id], onDelete: Cascade)
  pet       Pet?      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@unique([userId, petId])
  @@map("likes")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  petId     String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@unique([userId, petId])
  @@map("favorites")
}

model VolunteerApplication {
  id          String              @id @default(cuid())
  userId      String
  name        String
  phone       String
  email       String
  age         Int?
  occupation  String?
  experience  String?             @db.Text
  motivation  String?             @db.Text
  availability String?            @db.Text
  skills      String?             @db.Text
  status      ApplicationStatus   @default(PENDING)
  adminNotes  String?             @db.Text
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  // Relations
  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("volunteer_applications")
}

model Donation {
  id          String        @id @default(cuid())
  userId      String?
  donorName   String?
  donorEmail  String?
  amount      Decimal       @db.Decimal(10, 2)
  type        DonationType
  message     String?       @db.Text
  isAnonymous Boolean       @default(false)
  status      PaymentStatus @default(PENDING)
  paymentId   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("donations")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  content   String           @db.Text
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Enums
enum UserRole {
  USER
  ADMIN
  VOLUNTEER
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum PetSize {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum PetStatus {
  AVAILABLE
  ADOPTED
  RESERVED
  MEDICAL_CARE
  NOT_AVAILABLE
}

enum AdoptionStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DonationType {
  MONEY
  SUPPLIES
  FOOD
  MEDICAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  ADOPTION_UPDATE
  BOOKING_REMINDER
  VOLUNTEER_UPDATE
  DONATION_THANKS
  SYSTEM_NOTICE
}
