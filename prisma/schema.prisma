generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  phone     String?
  avatar    String?
  role      UserRole @default(USER)
  city      String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adoptionApplications AdoptionApplication[]
  bookings            Booking[]
  blogPosts           BlogPost[]
  comments            Comment[]
  likes               Like[]
  favorites           Favorite[]
  volunteerApplication VolunteerApplication?
  donations           Donation[]

  @@map("users")
}

model Pet {
  id          String    @id @default(cuid())
  name        String
  type        PetType
  breed       String
  age         String
  gender      PetGender
  weight      String?
  color       String?
  description String    @db.Text
  location    String
  status      PetStatus @default(AVAILABLE)
  images      String    @db.Text // JSON array of image URLs
  vaccinated  Boolean   @default(false)
  neutered    Boolean   @default(false)
  microchipped Boolean  @default(false)
  rescueStory String?   @db.Text
  careNeeds   String?   @db.Text
  personality String?   @db.Text
  arrivalDate DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  adoptionApplications AdoptionApplication[]
  likes               Like[]
  favorites           Favorite[]

  @@map("pets")
}

model AdoptionApplication {
  id                String            @id @default(cuid())
  userId            String
  petId             String
  status            ApplicationStatus @default(PENDING)
  personalInfo      String            @db.Text // JSON
  livingSituation   String            @db.Text // JSON
  petExperience     String            @db.Text // JSON
  lifestyle         String            @db.Text // JSON
  motivation        String            @db.Text // JSON
  agreements        String            @db.Text // JSON
  adminNotes        String?           @db.Text
  reviewedAt        DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("adoption_applications")
}

model Service {
  id          String  @id @default(cuid())
  name        String
  description String  @db.Text
  price       String
  duration    String
  category    String
  features    String  @db.Text // JSON array
  image       String?
  active      Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

model Booking {
  id             String        @id @default(cuid())
  userId         String
  serviceId      String
  status         BookingStatus @default(PENDING)
  date           DateTime
  time           String
  serviceType    String        @default("in-store") // in-store, home-visit
  petInfo        String        @db.Text // JSON
  contactInfo    String        @db.Text // JSON
  specialRequests String?      @db.Text
  totalAmount    Decimal       @db.Decimal(10, 2)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.LongText
  excerpt     String   @db.Text
  image       String?
  category    String
  tags        String   @db.Text // JSON array
  published   Boolean  @default(false)
  views       Int      @default(0)
  readTime    String
  authorId    String
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes    Like[]

  @@map("blog_posts")
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  postId    String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   BlogPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Like {
  id     String    @id @default(cuid())
  userId String
  petId  String?
  postId String?
  createdAt DateTime @default(now())

  // Relations
  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet?      @relation(fields: [petId], references: [id], onDelete: Cascade)
  post BlogPost? @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, petId])
  @@unique([userId, postId])
  @@map("likes")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  petId     String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@unique([userId, petId])
  @@map("favorites")
}

model VolunteerApplication {
  id                  String            @id @default(cuid())
  userId              String            @unique
  status              ApplicationStatus @default(PENDING)
  availableTime       String            @db.Text // JSON array
  preferredActivities String            @db.Text // JSON array
  experience          String?           @db.Text
  skills              String?           @db.Text
  motivation          String            @db.Text
  emergencyContact    String            @db.Text // JSON
  hasTransport        Boolean           @default(false)
  canTravel           Boolean           @default(false)
  adminNotes          String?           @db.Text
  reviewedAt          DateTime?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("volunteer_applications")
}

model Donation {
  id            String        @id @default(cuid())
  userId        String?
  amount        Decimal       @db.Decimal(10, 2)
  type          DonationType  @default(ONE_TIME)
  project       String
  paymentMethod String
  status        PaymentStatus @default(PENDING)
  isAnonymous   Boolean       @default(false)
  message       String?       @db.Text
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("donations")
}

// Enums
enum UserRole {
  USER
  ADMIN
  VOLUNTEER
}

enum PetType {
  DOG
  CAT
  RABBIT
  BIRD
  HAMSTER
  OTHER
}

enum PetGender {
  MALE
  FEMALE
}

enum PetStatus {
  AVAILABLE
  PENDING
  ADOPTED
  MEDICAL_CARE
  NOT_AVAILABLE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum DonationType {
  ONE_TIME
  MONTHLY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
