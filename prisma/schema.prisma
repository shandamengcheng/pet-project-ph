generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  address   String?
  avatar    String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adoptions   Adoption[]
  bookings    Booking[]
  blogPosts   BlogPost[]
  volunteers  Volunteer[]
  donations   Donation[]
  favorites   Favorite[]

  @@map("users")
}

model Pet {
  id          String     @id @default(cuid())
  name        String
  species     Species
  breed       String
  age         Int
  gender      Gender
  size        Size
  color       String
  description String     @db.Text
  images      String     @db.Text // JSON array of image URLs
  location    String
  status      PetStatus  @default(AVAILABLE)
  isVaccinated Boolean   @default(false)
  isNeutered  Boolean    @default(false)
  healthInfo  String?    @db.Text
  personality String?    @db.Text
  requirements String?   @db.Text
  rescueDate  DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  adoptions Adoption[]
  favorites Favorite[]

  @@map("pets")
}

model Adoption {
  id          String          @id @default(cuid())
  userId      String
  petId       String
  status      AdoptionStatus  @default(PENDING)
  reason      String          @db.Text
  experience  String?         @db.Text
  livingSpace String?
  hasOtherPets Boolean        @default(false)
  workSchedule String?
  references  String?         @db.Text
  notes       String?         @db.Text
  submittedAt DateTime        @default(now())
  reviewedAt  DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  completedAt DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map("adoptions")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  duration    Int      // in minutes
  category    String
  isActive    Boolean  @default(true)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings Booking[]

  @@map("services")
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  serviceId   String
  date        DateTime
  time        String
  status      BookingStatus @default(PENDING)
  notes       String?       @db.Text
  totalPrice  Decimal       @db.Decimal(10, 2)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model BlogPost {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.LongText
  excerpt     String?     @db.Text
  image       String?
  status      PostStatus  @default(DRAFT)
  authorId    String
  tags        String?     @db.Text // JSON array
  views       Int         @default(0)
  likes       Int         @default(0)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}

model Volunteer {
  id          String           @id @default(cuid())
  userId      String
  skills      String           @db.Text // JSON array
  availability String          @db.Text // JSON object
  experience  String?          @db.Text
  motivation  String           @db.Text
  status      VolunteerStatus  @default(PENDING)
  appliedAt   DateTime         @default(now())
  approvedAt  DateTime?
  rejectedAt  DateTime?

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("volunteers")
}

model Donation {
  id          String        @id @default(cuid())
  userId      String?
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("USD")
  type        DonationType  @default(ONE_TIME)
  status      PaymentStatus @default(PENDING)
  paymentId   String?       @unique
  message     String?       @db.Text
  isAnonymous Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("donations")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  petId     String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@unique([userId, petId])
  @@map("favorites")
}

// Enums
enum Role {
  USER
  ADMIN
  VOLUNTEER
}

enum Species {
  DOG
  CAT
  RABBIT
  BIRD
  HAMSTER
  GUINEA_PIG
  OTHER
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
}

enum Size {
  SMALL
  MEDIUM
  LARGE
  EXTRA_LARGE
}

enum PetStatus {
  AVAILABLE
  PENDING
  ADOPTED
  UNAVAILABLE
}

enum AdoptionStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum VolunteerStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum DonationType {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
